<?xml version="1.0"?>
<launch>
  <arg name="namespace" default="jackal0" />
  <!-- Generate the tf_prefix from the namespace -->
  <arg name="tfpre" default="$(arg namespace)_tf" />
  <!-- Put value on the parameter server in the group's namespace -->
  <param name="tf_prefix" value="$(arg namespace)_tf" />
  <!-- Initial pose - see "rosrun gazebo_ros spawn_model -h" for syntax -->
  <arg name="initX" default="0" />
  <arg name="initY" default="0" />
  <arg name="initZ" default="0" />
  <arg name="initYaw" default="0" />
  <arg name="laser_enabled" default="false"/>
  <arg name="ur5_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>
  <!-- The robot description tells Gazebo how to simulate
       the IMU, GPS and ground truth -->

  <arg name="config" default="base" />
  <arg name="env_runner" value="$(eval 'env_run' if not optenv('OS', 'unknown').lower().startswith('windows') else 'env_run.bat')" />
  <!-- the following seems to work too when in devel space, but not in install_isolated -->
  <!-- <arg name="env_runner" value="env_run" /> -->
  
  <group ns="$(arg namespace)">
  <param name="robot_description"
          command="$(find jackal_description_rtab)/scripts/$(arg env_runner)
                    $(find jackal_description_rtab)/urdf/configs/$(arg config)
                    $(find xacro)/xacro $(find jackal_description_rtab)/urdf/multi_jackal.urdf.xacro
                    --inorder
                    namespace:=$(arg namespace)
                    tfpre:=$(arg tfpre)"
                    />

  <!-- Note we set the "name" of the model in Gazebo using the namespace -->
  <node name="spawn_jackal_model" pkg="gazebo_ros" type="spawn_model"
	args="-x $(arg initX) -y $(arg initY) -Y $(arg initYaw) -unpause -urdf -param robot_description -model jackal_$(arg namespace)"/>

  <!-- Start the state publisher node in the namespace - uses the 
       joint states from gazebo
       along with the URDF model (robot_description) to publish 
       the joint positions to /tf --> 
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  
  <!-- Here we spawn (load and launch) two controllers which become 
       part of Gazebo. The key thing we need to do is to set the 
       "base_frame_id" of the diff_drive_controller
       to include the tf_prefix so that our tf trees work out.   
       So, we load the default control configuration and then overwrite 
       the base_frame_id -->
  <rosparam command="load" file="$(find jackal_control)/config/control.yaml" />
  <rosparam param="jackal_velocity_controller/base_frame_id" subst_value="True">$(arg tfpre)/base_link</rosparam>
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="jackal_joint_publisher jackal_velocity_controller --shutdown-timeout 3"/>
  
  <!-- Localization using imu and odometry simulated by Gazebo -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
    <rosparam command="load" file="$(find jackal_control)/config/robot_localization.yaml" />

  </node>

  <!-- Fake localization: Uses the ground truth odometry from the 
       P3D Gazebo plugin. This is necessary to provide a global frame
       of reference.
  <node pkg="fake_localization" type="fake_localization" name="fake_localization">
    <param name="odom_frame_id" value="$(arg tfpre)/odom" />
    <param name="delta_x" value="$(arg initX)" />
    <param name="delta_y" value="$(arg initY)" />
    <param name="delta_yaw" value="$(arg initYaw)" />
    <param name="base_frame_id" value="$(arg tfpre)/base_link" />
  </node>
  -->
  <!-- Or we could just set this as a static offset -->
  <node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="$(arg initX) $(arg initY) $(arg initZ) $(arg initYaw) 0 0 /map /$(arg tfpre)/odom 100" />
 
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0.0 0.0 0.0 0 0 0.0 /$(arg tfpre)/odom /$(arg tfpre)/base_link 1000"/>
  <!-- Twister server for rviz control-->
 <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen">
   <param name="link_name" value="$(arg tfpre)/base_link" />
 </node>

 <!-- Twist mux is a node from Clearpath that mixes control commands from multiple sources -->
  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find jackal_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="jackal_velocity_controller/cmd_vel"/>
  </node>

  </group>
</launch>