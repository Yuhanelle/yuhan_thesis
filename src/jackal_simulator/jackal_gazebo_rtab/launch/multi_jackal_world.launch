<launch>
  <!-- files and model parameter settings -->
  <arg name="use_sim_time" default="true" />
  <arg name="gui" default="true" />
  <arg name="headless" default="false" />
  <arg name="world_name" default="$(find jackal_gazebo_rtab)/worlds/jackal_race.world" />

  <!-- Short-term hack to support the original front_laser:=true argument for spawning
       the simulator. This will be removed in favour of using the config:=x arg instead. -->
  <arg name="front_laser" default="false" />
  <arg name="default_config" value="front_laser" if="$(arg front_laser)" />
  <arg name="default_config" value="base" unless="$(arg front_laser)" />
  <!-- end of hack -->

  <!-- Configuration of Jackal which you would like to simulate.
       See jackal_description for details. -->
  <arg name="config" default="$(arg default_config)" />

  <!-- Optionally enable teleop for the simulation -->
  <arg name="joystick" default="true" />

  <!-- define for the turtlebot environment -->
  <arg name="jackal0"  default="jackal0"/>
  <arg name="jackal1" default="jackal1"/>
  <!-- <arg name="jackal2"  default="jackal2"/> -->
  
  <arg name="jackal0_x_pos" default=" 0.5"/>
  <arg name="jackal0_y_pos" default=" 2.2"/>
  <arg name="jackal0_z_pos" default=" 0.0"/>
  <arg name="jackal0_yaw"   default=" 0.0"/>

  <arg name="jackal1_x_pos" default=" 0.5"/>
  <arg name="jackal1_y_pos" default=" 3.8"/>
  <arg name="jackal1_z_pos" default=" 0.0"/>
  <arg name="jackal1_yaw"   default=" 0.0"/>

  <!-- <arg name="jackal2_x_pos" default=" 0.5"/>
  <arg name="jackal2_y_pos" default=" 3.0"/>
  <arg name="jackal2_z_pos" default=" 0.0"/>
  <arg name="jackal2_yaw"   default=" 0.0"/> -->


<!-- launch gazebos from the data -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="0"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="false"/>
    <arg name="headless" value="false"/>
  </include>  

  <arg name="config" default="base" />
  <!-- fix for oneweek project -->
  <arg name="env_runner" value="$(eval 'env_run' if not optenv('OS', 'unknown').lower().startswith('windows') else 'env_run.bat')" />

<!-- spawn the robots and related information -->
  <group ns = "/$(arg jackal0)">
    <param name="robot_description"
         command="$(find jackal_description_rtab)/scripts/$(arg env_runner)
                    $(find jackal_description_rtab)/urdf/configs/$(arg config)
                    $(find xacro)/xacro $(find jackal_description_rtab)/urdf/multi_jackal.urdf.xacro
                    --inorder" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="100.0" />
      <param name="use_tf_static" type="bool" value="false" />
      <param name="tf_prefix" value="$(arg jackal0)" />
    </node>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
          args="-urdf -model $(jackal0) -x $(arg jackal0_x_pos) -y $(jackal0_y_pos) -z $(jackal0_z_pos) -Y $(arg jackal0_yaw) -param robot_description" />
    <!-- include gmapping for the first jackal-->
    <arg name="jackal0_scan_topic" default="/$(arg jackal0)front/scan" />

    <include file="$(find vld16_process)/launch/include/pointcloud_filter.launch" />
  
    <!--- Run gmapping -->
    <include file="$(find jackal_navigation_rtab)/launch/include/gmapping.launch">
        <arg name="scan_topic"    value="$(arg jackal0_scan_topic)" />
        <param name="odom_frame" value="$(arg jackal0)/odom"/>
        <param name="base_frame" value="$(arg jackal0)/base_link"/>
        <param name="map_frame" value="$(arg jackal0)/map"/>
    </include>

    <!-- include move base for the first jackal -->
    <include file="$(find jackal_navigation)/launch/include/move_base.launch">
    <!-- ###############################stopped here ##############33-->


    
    <include file="$(find ros_multitb3)/launch/includes/move_base.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
      <arg name="cmd_vel_topic" value="/$(arg first_tb3)/cmd_vel"/>
      <arg name="namespace" value="$(arg first_tb3)"/>
    </include>
    <!-- include amcl for the first turtle bot -->
    <include file="$(find ros_multitb3)/launch/includes/amcl.launch">
      <arg name="scan_topic" value="$(arg first_tb3)/scan"/>
      <arg name="global_frame_id" value="$(arg first_tb3)/map"/>
      <arg name="base_frame_id" value="$(arg first_tb3)/base_footprint"/>
      <arg name="odom_frame_id" value="$(arg first_tb3)/odom"/>
    </include>
  </group>

  <group ns = "/$(arg second_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="100.0" />
      <param name="use_tf_static" type="bool" value="false" />
      <param name="tf_prefix" value="$(arg second_tb3)" />
    </node>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg second_tb3) -x $(arg second_tb3_x_pos) -y $(arg second_tb3_y_pos) -z $(arg second_tb3_z_pos) -Y $(arg second_tb3_yaw) -param robot_description" />
    <!-- include gmapping for the second turtle bot -->
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_$(arg slam_methods).launch">
      <arg name="set_base_frame" value="$(arg second_tb3)/base_footprint"/>
      <arg name="set_odom_frame" value="$(arg second_tb3)/odom"/>
      <arg name="set_map_frame" value="$(arg second_tb3)/map"/>
      <arg name="configuration_basename" value="$(arg configuration_basename)"/>
    </include>
    <!-- include move base for the second turtle bot -->
    <include file="$(find ros_multitb3)/launch/includes/move_base.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
      <arg name="cmd_vel_topic" value="/$(arg second_tb3)/cmd_vel"/>
      <arg name="namespace" value="$(arg second_tb3)"/>
    </include>
    <!-- include amcl for the second turtle bot -->
    <include file="$(find ros_multitb3)/launch/includes/amcl.launch">
      <arg name="scan_topic" value="$(arg second_tb3)/scan"/>
      <arg name="global_frame_id" value="$(arg second_tb3)/map"/>
      <arg name="base_frame_id" value="$(arg second_tb3)/base_footprint"/>
      <arg name="odom_frame_id" value="$(arg second_tb3)/odom"/>
    </include>
  </group>

  <group ns = "/$(arg third_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="100.0" />
      <param name="use_tf_static" type="bool" value="false" />
      <param name="tf_prefix" value="$(arg third_tb3)" />
    </node>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg third_tb3) -x $(arg third_tb3_x_pos) -y $(arg third_tb3_y_pos) -z $(arg third_tb3_z_pos) -Y $(arg third_tb3_yaw) -param robot_description" />
    <!-- include gmapping for the third turtle bot -->
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_$(arg slam_methods).launch">
      <arg name="set_base_frame" value="$(arg third_tb3)/base_footprint"/>
      <arg name="set_odom_frame" value="$(arg third_tb3)/odom"/>
      <arg name="set_map_frame" value="$(arg third_tb3)/map"/>
      <arg name="configuration_basename" value="$(arg configuration_basename)"/>
    </include>
    <!-- include move base for the third turtle bot -->
    <include file="$(find ros_multitb3)/launch/includes/move_base.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
      <arg name="cmd_vel_topic" value="/$(arg third_tb3)/cmd_vel"/>
      <arg name="namespace" value="$(arg third_tb3)"/>
    </include>
    <!-- include amcl for the third turtle bot -->
    <include file="$(find ros_multitb3)/launch/includes/amcl.launch">
      <arg name="scan_topic" value="$(arg third_tb3)/scan"/>
      <arg name="global_frame_id" value="$(arg third_tb3)/map"/>
      <arg name="base_frame_id" value="$(arg third_tb3)/base_footprint"/>
      <arg name="odom_frame_id" value="$(arg third_tb3)/odom"/>
    </include>
  </group>

  <!-- perform map merging process  -->
  <include file="$(find ros_multitb3)/launch/includes/multi_tb3_mapmerge.launch">
    <arg name="model" value="$(arg model)" />
    <arg name="move_forward_only" value="$(arg move_forward_only)"/>
    <arg name="first_tb3" value="$(arg first_tb3)"/>
    <arg name="second_tb3" value="$(arg second_tb3)"/>
    <arg name="third_tb3" value="$(arg third_tb3)"/>
    <arg name="first_tb3_x_pos" default="$(arg first_tb3_x_pos)"/>
    <arg name="first_tb3_y_pos" default="$(arg first_tb3_y_pos)"/>
    <arg name="first_tb3_z_pos" default="$(arg first_tb3_z_pos)"/>
    <arg name="first_tb3_yaw"   default="$(arg first_tb3_yaw)"/>
    <arg name="second_tb3_x_pos" default="$(arg second_tb3_x_pos)"/>
    <arg name="second_tb3_y_pos" default="$(arg second_tb3_y_pos)"/>
    <arg name="second_tb3_z_pos" default="$(arg second_tb3_z_pos)"/>
    <arg name="second_tb3_yaw"   default="$(arg second_tb3_yaw)"/>
    <arg name="third_tb3_x_pos" default="$(arg third_tb3_x_pos)"/>
    <arg name="third_tb3_y_pos" default="$(arg third_tb3_y_pos)"/>
    <arg name="third_tb3_z_pos" default="$(arg third_tb3_z_pos)"/>
    <arg name="third_tb3_yaw"   default="$(arg third_tb3_yaw)"/>
  </include>

    <!-- open rviz for visualization purpose -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find ros_multitb3)/rviz/multi_tb3_gmapping.rviz"/>
