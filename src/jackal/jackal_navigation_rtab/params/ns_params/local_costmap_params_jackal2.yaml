local_costmap:
  global_frame: jackal2/odom
  robot_base_frame: jackal2/base_link
  update_frequency: 10.0
  publish_frequency: 10.0
  width: 6.0
  height: 6.0
  resolution: 0.05
  static_map: false
  rolling_window: true
  transform_tolerance: 0.5  

  observation_sources: point_cloud_sensor
  # assuming receiving a cloud from rtabmap_ros/obstacles_detection node
  point_cloud_sensor: {
    sensor_frame: jackal2/velodyne,
    data_type: PointCloud2, 
    topic: /jackal2/planner_cloud, 
    # expected_update_rate: 0.5, 
    marking: true, 
    clearing: true,
    min_obstacle_height: -99999.0,
    max_obstacle_height: 99999.0}

# plugins:
#   #- {name: static_layer,            type: "costmap_2d::StaticLayer"}
#    - {name: obstacle_layer,          type: "costmap_2d::VoxelLayer"}
#    - {name: inflation_layer,         type: "costmap_2d::InflationLayer"}

# obstacle_layer:
#   enabled: true
#   track_unknown_space: true
#   combination_method: 1
#   #The cost at which a cell is considered an obstacle when a map is read from the map_server
#   lethal_cost_threshold: 100

#   observation_sources: point_cloud_sensor
#   point_cloud_sensor: {sensor_frame: jackal2/velodyne, data_type: PointCloud2, topic: jackal2/planner_cloud, marking: true, clearing: true, min_obstacle_height: -99999.0, max_obstacle_height: 99999.0, obstacle_range: 5.0, raytrace_range: 4.0}


# #   observation_sources: scan
# #   scan: {sensor_frame: jackal2/velodyne, data_type: LaserScan, topic: /jackal2/front/scan, marking: true, clearing: true, obstacle_range: 3.0, raytrace_range: 4.0}

# inflation_layer:
#   enabled:              true
#   # cost_scaling_factor:  10.0       #10.0  # exponential rate at which the obstacle cost drops off (default: 10)
#   #inflation_radius:     0.2
#   # inflation_radius:     0.4   #0.4  # max. distance from an obstacle at which costs are incurred for planning paths.

#   inflation_radius: 0.15
#   cost_scaling_factor: 8.0